/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.gestioncafeterias.interfazGrafica.cafeteria;

import com.gestioncafeterias.acceso.AccesoCafeteria;
import com.gestioncafeterias.modelo.Cafeteria;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario Fernández
 */
public class ConsultarCafeterias extends javax.swing.JFrame {

    /**
     * Creates new form ConsultarCafeterias
     */
    public ConsultarCafeterias() {
        refrescarListado();
        initComponents();
        inicializarComponentes();
    }

    private void refrescarListado() {
        try {
            cafeterias = AccesoCafeteria.consultarTodos();
            modeloCafeterias = new DefaultTableModel(headerCafeterias, 0);
            for (Cafeteria cafeteria : cafeterias) {
                modeloCafeterias.addRow(cafeteria.toDataArray());
            }

            if (jTableCafeterias != null) {
                jTableCafeterias.setModel(modeloCafeterias);
            }
        } catch (ClassNotFoundException | SQLException ex) {
            mostrarMensajeError("Error interno.");
            Logger.getLogger(ConsultarCafeterias.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jButtonRefrescar = new javax.swing.JButton();
        jButtonBuscar = new javax.swing.JButton();
        jButtonInsertar = new javax.swing.JButton();
        jButtonActualizar = new javax.swing.JButton();
        jButtonEliminar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableCafeterias = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cafeterías");
        setIconImage((new ImageIcon("iconos/cafe.png")).getImage());

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 20, 5));

        jButtonRefrescar.setText("Volver al listado");
        jButtonRefrescar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefrescarActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonRefrescar);

        jButtonBuscar.setText("Buscar");
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonBuscar);

        jButtonInsertar.setText("Insertar");
        jButtonInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsertarActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonInsertar);

        jButtonActualizar.setText("Actualizar");
        jButtonActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActualizarActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonActualizar);

        jButtonEliminar.setText("Eliminar");
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonEliminar);

        jTableCafeterias.setModel(modeloCafeterias);
        jTableCafeterias.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(jTableCafeterias);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 768, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 354, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 768, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inicializarComponentes() {
        inicializarBotones();
        jTableCafeterias.getSelectionModel().addListSelectionListener((ListSelectionEvent event) -> {
            jButtonEliminar.setEnabled(true);
            jButtonActualizar.setEnabled(true);
        });
    }

    private void inicializarBotones() {
        jButtonEliminar.setEnabled(false);
        jButtonActualizar.setEnabled(false);
        jButtonRefrescar.setVisible(false);
    }

    private void jButtonInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsertarActionPerformed
        InsertarActualizarCafeteria ventana = new InsertarActualizarCafeteria(this, true);
        ventana.setLocationRelativeTo(jTableCafeterias);
        ventana.setVisible(true);
        ventana.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                refrescarListado();
                inicializarBotones();
            }
        });

    }//GEN-LAST:event_jButtonInsertarActionPerformed

    private void jButtonActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActualizarActionPerformed
        InsertarActualizarCafeteria ventana = new InsertarActualizarCafeteria(this, true, obtenerIdSeleccion());
        ventana.setLocationRelativeTo(jTableCafeterias);
        ventana.setVisible(true);
        ventana.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                refrescarListado();
                inicializarBotones();
            }
        });
    }//GEN-LAST:event_jButtonActualizarActionPerformed

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        int opcion = JOptionPane.showConfirmDialog(jTableCafeterias, "¿Eliminar cafetería?", "Eliminar", JOptionPane.YES_NO_OPTION);
        if (opcion == 0) {
            try {
                AccesoCafeteria.eliminar(obtenerIdSeleccion());
                refrescarListado();
                inicializarBotones();
            } catch (ClassNotFoundException | SQLException ex) {
                mostrarMensajeError("Error interno.");
                Logger.getLogger(ConsultarCafeterias.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_jButtonEliminarActionPerformed

    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarActionPerformed
        try {
            String resultadoPopUp = JOptionPane.showInputDialog(jTableCafeterias, "Introduzca el id de la cafetería");
            if (resultadoPopUp != null && !resultadoPopUp.isEmpty()) {
                Cafeteria cafeteria = AccesoCafeteria.consultar(Integer.parseInt(resultadoPopUp));
                if (cafeteria != null) {
                    cafeterias = new ArrayList<>();
                    cafeterias.add(cafeteria);
                    modeloCafeterias = new DefaultTableModel(headerCafeterias, 0);
                    modeloCafeterias.addRow(cafeteria.toDataArray());

                    if (jTableCafeterias != null) {
                        jTableCafeterias.setModel(modeloCafeterias);
                    }

                    jButtonRefrescar.setVisible(true);
                } else {
                    mostrarMensajeError("No existe ninguna cafetería con id: " + resultadoPopUp);
                }
            }

        } catch (ClassNotFoundException | SQLException ex) {
            mostrarMensajeError("Error interno.");
            Logger.getLogger(ConsultarCafeterias.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            mostrarMensajeError("El identificador debe ser numérico.");
            Logger.getLogger(ConsultarCafeterias.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonBuscarActionPerformed

    private void jButtonRefrescarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefrescarActionPerformed
        refrescarListado();
        inicializarBotones();
    }//GEN-LAST:event_jButtonRefrescarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConsultarCafeterias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ConsultarCafeterias().setVisible(true);
        });
    }

    private int obtenerIdSeleccion() {
        int indice = jTableCafeterias.getSelectedRow();
        Cafeteria cafeteria = cafeterias.get(indice);
        return cafeteria.getIdCafeteria();
    }

    private void mostrarMensajeError(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje, "Error", JOptionPane.ERROR_MESSAGE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonActualizar;
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonInsertar;
    private javax.swing.JButton jButtonRefrescar;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableCafeterias;
    // End of variables declaration//GEN-END:variables
    String[] headerCafeterias = new String[]{"id", "Horario", "Dirección", "Aforo", "Precio alquiler", "Gerente"};
    private DefaultTableModel modeloCafeterias;
    List<Cafeteria> cafeterias;
}
